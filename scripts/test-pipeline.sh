#!/bin/bash

# =============================================================================
# Test Real-Time Streaming ETL Pipeline with Data Validation
# PostgreSQL CDC ‚Üí Flink ETL with Validation ‚Üí StarRocks Clean/Error Tables
# =============================================================================

set -e

echo "üß™ Testing Real-Time Streaming ETL Pipeline with Data Validation..."
echo "üìä Architecture: PostgreSQL CDC ‚Üí Transform + Validate ‚Üí StarRocks Clean/Error Tables"

# Insert test data
TIMESTAMP=$(date +%s)
echo "üìù Inserting test data (timestamp: $TIMESTAMP)..."

# ===========================================================================
# TEST 1: VALID DATA (should go to clean tables)
# ===========================================================================

echo "‚úÖ TEST 1: Inserting VALID data..."

# Insert new product
echo "üìù Inserting valid product into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO products (product_id, product_category_name) 
VALUES ('test_product_${TIMESTAMP}', 'informatica_teste');
"

# Insert new order
echo "üìù Inserting valid order into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO orders (order_id, customer_id, order_status, order_purchase_timestamp, order_estimated_delivery_date) 
VALUES ('test_order_${TIMESTAMP}', (SELECT customer_id FROM customers LIMIT 1), 'processing', NOW(), NOW() + INTERVAL '7 days');
"

# Insert order item with high price for testing transformations
echo "üìù Inserting valid order item into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO order_items (order_id, product_id, price, freight_value) 
VALUES ('test_order_${TIMESTAMP}', 'test_product_${TIMESTAMP}', 175.50, 12.25);
"

# Insert payment
echo "üìù Inserting valid payment into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO payments (order_id, payment_type, payment_value) 
VALUES ('test_order_${TIMESTAMP}', 'credit_card', 187.75);
"

# Insert valid review
echo "üìù Inserting valid review into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO reviews (review_id, order_id, review_score) 
VALUES ('test_review_${TIMESTAMP}', 'test_order_${TIMESTAMP}', 4);
"

# Insert valid customer
echo "üìù Inserting valid customer into PostgreSQL..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO customers (customer_id, customer_unique_id, customer_city, customer_state) 
VALUES ('test_customer_${TIMESTAMP}', 'unique_test_${TIMESTAMP}', 'S√£o Paulo', 'SP');
"

echo "‚è≥ Waiting for CDC + ETL to process valid data (15 seconds)..."
sleep 15

# ===========================================================================
# TEST 2: INVALID DATA (should go to error tables)
# ===========================================================================

echo "‚ùå TEST 2: Inserting INVALID data for validation testing..."

# Insert invalid product (NULL product_id)
echo "üìù Inserting invalid product (empty product_id)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO products (product_id, product_category_name) 
VALUES ('', 'invalid_category');
" || echo "Expected error - continuing..."

# Insert invalid order (NULL customer_id) 
echo "üìù Inserting invalid order (NULL customer_id)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO orders (order_id, customer_id, order_status, order_purchase_timestamp, order_estimated_delivery_date) 
VALUES ('invalid_order_${TIMESTAMP}', NULL, 'processing', NOW(), NOW() + INTERVAL '7 days');
"

# Insert invalid order item (negative price)
echo "üìù Inserting invalid order item (negative price)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO order_items (order_id, product_id, price, freight_value) 
VALUES ('invalid_order_${TIMESTAMP}', 'test_product_${TIMESTAMP}', -50.0, 12.25);
"

# Insert invalid payment (negative value)
echo "üìù Inserting invalid payment (negative value)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO payments (order_id, payment_type, payment_value) 
VALUES ('invalid_order_${TIMESTAMP}', 'credit_card', -100.0);
"

# Insert invalid review (score out of range)
echo "üìù Inserting invalid review (score = 10, should be 1-5)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO reviews (review_id, order_id, review_score) 
VALUES ('invalid_review_${TIMESTAMP}', 'invalid_order_${TIMESTAMP}', 10);
"

# Insert invalid customer (invalid state code)
echo "üìù Inserting invalid customer (invalid state code)..."
PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d ecommerce -c "
INSERT INTO customers (customer_id, customer_unique_id, customer_city, customer_state) 
VALUES ('invalid_customer_${TIMESTAMP}', 'unique_invalid_${TIMESTAMP}', 'Test City', 'INVALID_STATE');
"

echo "‚è≥ Waiting for CDC + ETL to process invalid data (15 seconds)..."
sleep 15

# ===========================================================================
# VERIFY CLEAN DATA
# ===========================================================================

echo "üîç Checking VALID data in StarRocks Clean tables..."

# Check products with category grouping
echo "üìä Testing Products ETL (category grouping):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT product_id, product_category_name, category_group 
FROM ods_products 
WHERE product_id = 'test_product_${TIMESTAMP}';
"

# Check orders with transformations
echo "üìä Testing Orders ETL (status normalization, date extraction):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT order_id, order_status, order_year, order_month, is_delivered 
FROM ods_orders 
WHERE order_id = 'test_order_${TIMESTAMP}';
"

# Check order items with pricing categories
echo "üìä Testing Order Items ETL (pricing categories):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT order_id, price, total_item_value, price_category 
FROM ods_order_items 
WHERE order_id = 'test_order_${TIMESTAMP}';
"

# Check payments with categorization
echo "üìä Testing Payments ETL (payment categorization):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT order_id, payment_type, payment_value, payment_category, is_high_value 
FROM ods_payments 
WHERE order_id = 'test_order_${TIMESTAMP}';
"

# Check reviews
echo "üìä Testing Reviews ETL (review categorization):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT order_id, review_score, review_category, is_positive_review 
FROM ods_reviews 
WHERE order_id = 'test_order_${TIMESTAMP}';
"

# Check customers
echo "üìä Testing Customers ETL (regional analysis):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean; 
SELECT customer_id, customer_city, customer_state, state_region 
FROM ods_customers 
WHERE customer_id = 'test_customer_${TIMESTAMP}';
"

# ===========================================================================
# VERIFY ERROR DATA
# ===========================================================================

echo ""
echo "üîç Checking INVALID data in StarRocks Error tables..."

# Check error log
echo "üìä Testing Error Log (general error tracking):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT table_name, error_type, error_message, error_timestamp 
FROM ods_error_log 
WHERE error_timestamp >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
ORDER BY error_timestamp DESC 
LIMIT 10;
"

# Check specific error tables
echo "üìä Testing Orders Error Table:"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT order_id, error_type, error_message 
FROM ods_orders_error 
WHERE order_id = 'invalid_order_${TIMESTAMP}';
"

echo "üìä Testing Order Items Error Table:"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT order_id, price, error_type, error_message 
FROM ods_order_items_error 
WHERE order_id = 'invalid_order_${TIMESTAMP}';
"

echo "üìä Testing Payments Error Table:"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT order_id, payment_value, error_type, error_message 
FROM ods_payments_error 
WHERE order_id = 'invalid_order_${TIMESTAMP}';
"

echo "üìä Testing Reviews Error Table:"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT order_id, review_score, error_type, error_message 
FROM ods_reviews_error 
WHERE order_id = 'invalid_order_${TIMESTAMP}';
"

echo "üìä Testing Customers Error Table:"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error; 
SELECT customer_id, customer_state, error_type, error_message 
FROM ods_customers_error 
WHERE customer_id = 'invalid_customer_${TIMESTAMP}';
"

# ===========================================================================
# VALIDATION SUMMARY
# ===========================================================================

echo ""
echo "üîç Verifying ETL Transformations and Validation:"

# Count valid test records
TEST_PRODUCTS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_products WHERE product_id = 'test_product_${TIMESTAMP}';")
TEST_ORDERS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_orders WHERE order_id = 'test_order_${TIMESTAMP}';")
TEST_ORDER_ITEMS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_order_items WHERE order_id = 'test_order_${TIMESTAMP}';")
TEST_PAYMENTS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_payments WHERE order_id = 'test_order_${TIMESTAMP}';")
TEST_REVIEWS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_reviews WHERE order_id = 'test_order_${TIMESTAMP}';")
TEST_CUSTOMERS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT COUNT(*) FROM ods_customers WHERE customer_id = 'test_customer_${TIMESTAMP}';")

# Count error records
ERROR_ORDERS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_error; SELECT COUNT(*) FROM ods_orders_error WHERE order_id = 'invalid_order_${TIMESTAMP}';")
ERROR_ORDER_ITEMS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_error; SELECT COUNT(*) FROM ods_order_items_error WHERE order_id = 'invalid_order_${TIMESTAMP}';")
ERROR_PAYMENTS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_error; SELECT COUNT(*) FROM ods_payments_error WHERE order_id = 'invalid_order_${TIMESTAMP}';")
ERROR_REVIEWS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_error; SELECT COUNT(*) FROM ods_reviews_error WHERE order_id = 'invalid_order_${TIMESTAMP}';")
ERROR_CUSTOMERS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_error; SELECT COUNT(*) FROM ods_customers_error WHERE customer_id = 'invalid_customer_${TIMESTAMP}';")

# Check transformation results
PRODUCT_CATEGORY=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT category_group FROM ods_products WHERE product_id = 'test_product_${TIMESTAMP}';")
ORDER_STATUS=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT order_status FROM ods_orders WHERE order_id = 'test_order_${TIMESTAMP}';")
PRICE_CATEGORY=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT price_category FROM ods_order_items WHERE order_id = 'test_order_${TIMESTAMP}';")
PAYMENT_CATEGORY=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT payment_category FROM ods_payments WHERE order_id = 'test_order_${TIMESTAMP}';")
REVIEW_CATEGORY=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT review_category FROM ods_reviews WHERE order_id = 'test_order_${TIMESTAMP}';")
CUSTOMER_REGION=$(mysql -h 127.0.0.1 -P 9030 -u root -s -N -e "USE ecommerce_ods_clean; SELECT state_region FROM ods_customers WHERE customer_id = 'test_customer_${TIMESTAMP}';")

echo "‚úÖ VALID Records found: Products($TEST_PRODUCTS), Orders($TEST_ORDERS), Order Items($TEST_ORDER_ITEMS), Payments($TEST_PAYMENTS), Reviews($TEST_REVIEWS), Customers($TEST_CUSTOMERS)"
echo "‚ùå ERROR Records found: Orders($ERROR_ORDERS), Order Items($ERROR_ORDER_ITEMS), Payments($ERROR_PAYMENTS), Reviews($ERROR_REVIEWS), Customers($ERROR_CUSTOMERS)"

echo ""
echo "‚úÖ Transformations applied to valid data:"
echo "   üì¶ Product category: informatica_teste ‚Üí $PRODUCT_CATEGORY"
echo "   üìã Order status: processing ‚Üí $ORDER_STATUS"  
echo "   üí∞ Price category: 175.50 ‚Üí $PRICE_CATEGORY"
echo "   üí≥ Payment category: credit_card ‚Üí $PAYMENT_CATEGORY"
echo "   ‚≠ê Review category: score 4 ‚Üí $REVIEW_CATEGORY"
echo "   üè† Customer region: SP ‚Üí $CUSTOMER_REGION"

# Overall test result
TOTAL_VALID_EXPECTED=6
TOTAL_ERROR_EXPECTED=5
ACTUAL_VALID_TOTAL=$((TEST_PRODUCTS + TEST_ORDERS + TEST_ORDER_ITEMS + TEST_PAYMENTS + TEST_REVIEWS + TEST_CUSTOMERS))
ACTUAL_ERROR_TOTAL=$((ERROR_ORDERS + ERROR_ORDER_ITEMS + ERROR_PAYMENTS + ERROR_REVIEWS + ERROR_CUSTOMERS))

echo ""
if [ "$ACTUAL_VALID_TOTAL" -eq "$TOTAL_VALID_EXPECTED" ] && [ "$ACTUAL_ERROR_TOTAL" -ge 2 ]; then
    echo "üéâ STREAMING ETL PIPELINE WITH VALIDATION TEST PASSED!"
    echo "‚úÖ All valid data processed with correct transformations"
    echo "‚úÖ Invalid data correctly routed to error tables"
else
    echo "‚ùå Pipeline test FAILED!"
    echo "   Expected $TOTAL_VALID_EXPECTED valid records, got $ACTUAL_VALID_TOTAL"
    echo "   Expected at least 2 error records, got $ACTUAL_ERROR_TOTAL"
fi

echo ""
echo "üìà Pipeline Summary:"
echo "StarRocks Clean Tables (valid data with ETL transformations):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_clean;
SELECT 'ods_products' as table_name, COUNT(*) as record_count FROM ods_products
UNION SELECT 'ods_orders', COUNT(*) FROM ods_orders
UNION SELECT 'ods_order_items', COUNT(*) FROM ods_order_items
UNION SELECT 'ods_payments', COUNT(*) FROM ods_payments
UNION SELECT 'ods_reviews', COUNT(*) FROM ods_reviews
ORDER BY table_name;
"

echo ""
echo "StarRocks Error Tables (invalid data for monitoring):"
mysql -h 127.0.0.1 -P 9030 -u root -e "
USE ecommerce_ods_error;
SELECT 'ods_error_log' as table_name, COUNT(*) as record_count FROM ods_error_log
UNION SELECT 'ods_orders_error', COUNT(*) FROM ods_orders_error
UNION SELECT 'ods_order_items_error', COUNT(*) FROM ods_order_items_error
UNION SELECT 'ods_products_error', COUNT(*) FROM ods_products_error
UNION SELECT 'ods_payments_error', COUNT(*) FROM ods_payments_error
UNION SELECT 'ods_reviews_error', COUNT(*) FROM ods_reviews_error
ORDER BY table_name;
"