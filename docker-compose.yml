services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL","bash -c '</dev/tcp/localhost/2181'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - starrocks-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - starrocks-net

  flink-jobmanager:
    image: flink:1.17
    container_name: flink-jobmanager
    command: jobmanager
    ports:
      - "8081:8081"  # Flink UI
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - starrocks-net

  flink-taskmanager:
    image: flink:1.17
    container_name: flink-taskmanager
    command: taskmanager
    depends_on:
      - flink-jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - starrocks-net

  flink-validator:
    build:
      context: .
      dockerfile: flink-job/Dockerfile
    container_name: flink-validator
    depends_on:
      postgres:
        condition: service_healthy
#      kafka:
#        condition: service_healthy
    networks:
      - starrocks-net

  starrocks-quickstart:
    image: starrocks/allin1-ubuntu:latest
    container_name: starrocks-quickstart
    environment:
      - STARROCKS_HEAP_SIZE=4G
      - FE_SERVICE_PORT=8030
      - FRONTEND_MYSQL_PORT=9030
    ports:
      - "8030:8030"   # StarRocks Web UI
      - "9030:9030"   # MySQL protocol
      - "8040:8040"   # BE query port
    networks:
      - starrocks-net

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: retail_user
      POSTGRES_PASSWORD: retail_pass
      POSTGRES_DB: retail_db
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U retail_user" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - starrocks-net

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      - starrocks-quickstart
    networks:
      - starrocks-net

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      - kafka
    networks:
      - starrocks-net

volumes:
  metabase-data:
  postgres-data:

networks:
  starrocks-net:
    driver: bridge
